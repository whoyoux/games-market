generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    role          Role          @default(USER)
    image         String?
    accounts      Account[]
    sessions      Session[]
    transactions  Transaction[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Offer {
    id           String        @id @default(cuid())
    name         String
    image        String?
    price        Float
    isPromotion  Boolean       @default(false)
    keywords     Keyword[]
    transactions Transaction[]
    keys         Key[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Key {
    id    String @id @default(cuid())
    value String

    offer   Offer  @relation(fields: [offerId], references: [id])
    offerId String

    isUsed      Boolean       @default(false)
    Transaction Transaction[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([id, offerId])
}

model Keyword {
    id    String  @id @default(cuid())
    text  String
    offer Offer[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Transaction {
    id      String @id @default(cuid())
    offer   Offer  @relation(fields: [offerId], references: [id])
    offerId String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    key   Key    @relation(fields: [keyId], references: [id])
    keyId String

    isPaid Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([id, userId, offerId, keyId])
}

enum Role {
    USER
    ADMIN
}
